{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fswiss\fcharset0 ArialMT;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red30\green68\blue163;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\fi560\sl288\slmult1\sb160\ql\qnatural\pardirnatural

\f0\fs28 \cf0 The easiest way to charge users for your app is by using the billing features built into the Shopify API.\
Charges made through the Shopify API come in two forms:\
1. One-shot\
2. Recurring\
The workflow for charging a shop for your application looks like this:\
\
\pard\pardeftab720\ql\qnatural

\f1\fs26 \cf0 1. A merchant keen to increase sales installs your application. After installing, Shopify redirects them to your site at {\field{\*\fldinst{HYPERLINK "http://yourapp.com/"}}{\fldrslt \cf2 \ul \ulc2 http://yourapp.com}}\
\
2. Authentication occurs as explained in\'a0{\field{\*\fldinst{HYPERLINK "http://api.shopify.com/authentication.html"}}{\fldrslt \cf2 \ul \ulc2 http://api.shopify.com/authentication.html}}\
\
3. The login authentication controller redirects the freshly authenticated shop owner to {\field{\*\fldinst{HYPERLINK "http://yourapp.com/welcome_to_your_new_service"}}{\fldrslt \cf2 \ul \ulc2 http://yourapp.com/welcome_to_your_new_service}} by a\'a0``
\f2 before_filter :ensure_merchant_has_paid`` 
\f1 line placed in the ApplicationController.\
\
    This\'a0``
\f2 ensure_merchant_has_paid`` 
\f1 method looks just like the one described in\'a0{\field{\*\fldinst{HYPERLINK "http://api.shopify.com/billing.html"}}{\fldrslt \cf2 \ul \ulc2 http://api.shopify.com/billing.html}} under the \'a0RecurringCharges section: it checks if the merchant has an existing RecurringApplicationCharge, and if not, it creates one.\
\
(Note that this means that the LoginController has a line like\'a0
\f2 skip_before_filter :ensure_merchant_has_paid
\f1 )\
\
4. Let's assume that ``ShopifyAPI::RecurringApplicationCharge.current`` returned false, so the interpreter executes the ``ShopifyAPI::RecurringApplicationCharge.create(:name => "Basic plan", :price => 4.99, :return_url => '{\field{\*\fldinst{HYPERLINK "http://yourapp.com/charges/confirm"}}{\fldrslt \cf2 \ul \ulc2 http://yourapp.com/charges/confirm}}')`` call.\
\
That API call creates a ``RecurringApplicationCharge`` on Shopify, linked to your app and the current shop using your app. It's created with the parameters you passed in: name, price, and return_url.\
\
Shopify returns some xml that the ShopifyAPI gem turns into a ``RecurringApplicationCharge`` object. That object has a ``confirmation_url`` set on it.\
\
5. The last line in the typical Recurring Charges example\'a0[{\field{\*\fldinst{HYPERLINK "http://api.shopify.com/billing.html"}}{\fldrslt \cf2 \ul \ulc2 http://api.shopify.com/billing.html}}] redirects the merchant to that ``confirmation_url``. The page they're redirected to is hosted at Shopify and looks similar to the one the merchant saw when they installed the app ![]({\field{\*\fldinst{HYPERLINK "http://api.shopify.com/images/MegaInvoiceInstallation.png"}}{\fldrslt \cf2 \ul \ulc2 http://api.shopify.com/images/MegaInvoiceInstallation.png}}), but it says \'93YourApp would like to charge you #\{price\} on a recurring basis for the #\{name\}\'94. At the bottom of the page, there's an Accept button, and a Decline button.\
\
6. If the user clicks Accept or Decline, Shopify redirects them to the return_url set on the ``RecurringApplicationCharge`` with a parameter \'93accept\'94 set to true or false.\
\
7. The ``RecurringCharge`` ``return_url`` was set to\'a0{\field{\*\fldinst{HYPERLINK "http://yourapp.com/charges/confirm"}}{\fldrslt \cf2 \ul \ulc2 http://yourapp.com/charges/confirm}} so the ``ChargesController#confirm`` handles that request. Inside\'a0``ChargesController#confirm`` there\'92s code that checks if the ``params[:accepted]`` variable is set, and acts accordingly, by redirecting them back to where they should start out after approving to a certain plan or charge, or redirect them back to the app store if ``params[:accepted]`` is false.\
\
(Note the ChargesController also has a line like\'a0``
\f2 skip_before_filter :ensure_merchant_has_paid`` 
\f1 otherwise you would be stuck in an infinite loop.)\
\
8. That\'92s it! With the RecurringCharge in place, the ``ShopifyAPI::RecurringApplicationCharge.current`` call will return true (if an active recurring charge exists for that shop), and Shopify will pay you through the Paypal account you set up after the merchant pays Shopify their monthly bill.}