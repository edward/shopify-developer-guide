{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red118\green132\blue167;\red136\green0\blue0;
\red255\green255\blue190;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\deftab720
\pard\pardeftab720\sl320\sa220\ql\qnatural

\f0\fs22 \cf2 # Authentication\
Every Shopify API call looks something like this:
\f1\fs24 \cf3 \
	https://api_key:password@some-store.myshopify.com/admin/some-resource\

\f0\fs22 \cf2 \
For example, the following call fetches all of some-shop\'92s orders:
\f1\fs24 \cf3 \
	https://API_KEY:SOME_PASSWORD@some-shop.myshopify.com/admin/orders.xml\

\f0\fs22 \cf2 \
Without a valid **
\b API key**
\b0  and **
\b password**
\b0 , nothing works.\
\
This article covers how to find and generate those two credentials.\
\pard\pardeftab720\sl320\sa140\ql\qnatural

\b\fs30 \cf4 ## API keys and secrets\
\pard\pardeftab720\sl320\sa220\ql\qnatural

\b0\fs22 \cf2 Each Shopify application has an API key and a secret known only to you and Shopify. Don\'92t ever share this secret \'96 if someone else gets a hold of it, they\'92ll be able to access anything your application has access to (which is really bad if shop owners have trusted you and only you with taking safe care of their data).\
\
To illustrate the process of authentication, let\'92s say that you\'92ve created a Shopify application called Mega Invoice, and it has an **
\b API key**
\b0  \'93invoice-api-key\'94, and a **
\b secret**
\b0  \'93hush\'94.\
\
We can see these credentials in this screenshot from the Shopify Partners admin: \
![Mega Invoice Credentials]({\field{\*\fldinst{HYPERLINK "http://api.shopify.com/images/MegaInvoiceCredentials.png"}}{\fldrslt http://api.shopify.com/images/MegaInvoiceCredentials.png}})\
\
\uc0\u8232 Under normal circumstances, the API key and secret are strings of random characters (e.g. \'93f26eb9d7cd1352014d22a54e13bf6259\'94) but we\'92ll keep it simple for this example.\
Mega Invoice is set up at http://megainvoice.com so you\'92ve configured so that after installation, it redirects shop owners to
\f1\fs24 \cf3 \
	http://megainvoice.com/welcome\
\

\f0\fs22 \cf2 We can see the **
\b return url**
\b0  from this screenshot from the Shopify Partners admin: <br />\
![return url in the admin]({\field{\*\fldinst{HYPERLINK "http://api.shopify.com/images/MegaInvoiceReturnUrl.png"}}{\fldrslt http://api.shopify.com/images/MegaInvoiceReturnUrl.png}})\
\pard\pardeftab720\sl320\sa140\ql\qnatural

\b\fs30 \cf4 ## Installation Walkthrough\
\pard\pardeftab720\sl320\sa220\ql\qnatural

\b0\fs22 \cf2 Now that we\'92ve set the stage, let\'92s walk through a shop owner installing Mega Invoice:\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\ql\qnatural
\ls1\ilvl0\cf2 1. A shop owner is amazed by your marketing on the app store, and ends up looking at the \'93Installing Mega Invoice\'94 screen, otherwise accessible\
	 by doing a ``
\f1\fs24 \cf3 GET <shop url>/admin/api/auth?api_key=<API key>`` <br/> ![Installation screen]({\field{\*\fldinst{HYPERLINK "http://api.shopify.com/images/MegaInvoiceInstallation.png"}}{\fldrslt http://api.shopify.com/images/MegaInvoiceInstallation.png}})
\f0\fs22 \cf2 \
2. The shop owner clicks \'93Install\'94, and in doing so, grants your application access to their shop\'92s data.\
\
3. Shopify redirects to Mega Invoice\'92s **
\b return url**
\b0 , and appends the shop name and an authentication token as parameters: ``
\f1\fs24 \cf3 GET http://megainvoice.com/welcome?shop=some-shop.myshopify.com&t=a94a110d86d2452eb3e2af4cfb8a3828``\uc0\u8232 
\f0\fs22 \cf2 (In this case, the authentication token **
\b t**
\b0  is a94a110d86d2452eb3e2af4cfb8a3828)\
4. Mega Invoice concatenates its secret with authentication token **
\b t**
\b0  and hashes the result into an MD5 hexdigest to generate the API password: ``
\f1\fs24 \cf3 password = MD5.hexdigest(secret + t)``\uc0\u8232 
\f0\fs22 \cf2 which in our example looks like: ``
\f1\fs24 \cf3 password = MD5.hexdigest("hush" + "a94a110d86d2452eb3e2af4cfb8a3828")``\uc0\u8232 
\f0\fs22 \cf2  so the generated password specific to Mega Invoice and some-shop is ``
\f1\fs24 \cf3 36b29a08b3113077f14777570c0577ed``\
\uc0\u8232 
\f0\b\fs22 \cf2 \cb5 *Note that the order of parameters matters when you hash the secret + token \'96 it must be in this order.*
\b0 \cb1 \
5. That\'92s it! We\'92re done: we know the Mega Invoice API key and the password, so we can run an API call like this: ``
\f1\fs24 \cf3 https://invoice-api-key:36b29a08b3113077f14777570c0577ed@some-shop.myshopify.com/admin/orders.xml``\uc0\u8232 
\f0\fs22 \cf2 and receive all of some-shop\'92s orders.}